    class Solution {

        char[] wordArray;
        int rows;
        int cols;
        int n;
        int[][] DIRECTIONS = new int[][]{{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
        boolean[][] visited;


        public boolean exist(char[][] board, String word) {

            wordArray = word.toCharArray();
            rows = board.length;
            cols = board[0].length;
            n = word.length();
            visited = new boolean[rows][cols];

            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < cols; j++) {
                    if (backtracking(i, j, 0, board)) {
                        return true;
                    }
                }
            }

            return false;

        }

        public boolean backtracking(int x, int y, int start, char[][] board) {
            if (start == n - 1) {
                return board[x][y] == wordArray[start];
            }

            if (board[x][y] == wordArray[start]) {
                visited[x][y] = true;
                for (int[] direction : DIRECTIONS) {
                    int newX = x + direction[0];
                    int newY = y + direction[1];
                    if (newX >= 0 && newY >= 0 && newX < rows && newY < cols && !visited[newX][newY]) {
                        if (backtracking(newX, newY, start + 1, board)) {
                            return true;
                        }
                    }

                }
                visited[x][y] = false;
            }
            return false;
        }
    }

//runtime:97 ms
//memory:39.3 MB
