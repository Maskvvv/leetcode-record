class Solution {
    public int[] searchRange(int[] nums, int target) {
        int n = nums.length;

        if (nums == null || nums.length == 0) {
            return new int[]{-1, -1};
        }

        int[] res = new int[2];

        int left = 0, right = nums.length;

        while (left < right) {
            int middle = left + (right - left) / 2;

            if (nums[middle] == target) {
                right = middle;
            } else if (nums[middle] < target) {
                left = middle + 1;
            } else {
                right = middle;
            }
        }
        res[0] = left;

        left = 0;
        right = nums.length;
        while (left < right) {
            int middle = left + (right - left) / 2;

            if (nums[middle] == target) {
                left = middle + 1;
            } else if (nums[middle] < target) {
                left = middle + 1;
            } else {
                right = middle;
            }
        }
        res[1] = left - 1;

        if (res[0] >= n || res[1] >= n|| nums[res[0]] != target || nums[res[1]] != target) {
            res[0] = -1;
            res[1] = -1;
        }

        return res;

    }
}
//runtime:0 ms
//memory:44.6 MB
