class Solution {
    public String longestPalindrome(String s) {
        int n = s.length();
        if (n < 2) return s;

        boolean[][] dp = new boolean[n][n];

        for (int i = 0; i < n; i++) {
            dp[i][i] = true;
        }

        int[] res = new int[]{0, 0};

        char[] charArray = s.toCharArray();

        for (int j = 1; j < n; j++) {
            for (int i = 0; i < j; i++) {
                if (i + 1 == j) {
                    dp[i][j] = charArray[i] == charArray[j];
                } else {
                    dp[i][j] = dp[i + 1][j - 1] && (charArray[i] == charArray[j]);
                }

                if (dp[i][j] && (res[1] - res[0]) < (j - i + 1)) {
                    res[0] = i;
                    res[1] = j;
                }
            }
        }

        return s.substring(res[0], res[1] + 1);

    }
}
//runtime:125 ms
//memory:44.6 MB
