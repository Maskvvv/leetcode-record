    class Solution {
        List<List<Integer>> res = new ArrayList<>();
        Deque<Integer> path = new ArrayDeque<>();

        public List<List<Integer>> subsets(int[] nums) {
            backtracking(nums, 0);
            return res;
        }

        public void backtracking(int[] nums, int startIndex) {
            res.add(new ArrayList<>(path));

            for (int i = startIndex; i < nums.length; i++) {
                path.addLast(nums[i]);
                backtracking(nums, i + 1);
                path.removeLast();
            }
        }
    }

//runtime:0 ms
//memory:41.6 MB
