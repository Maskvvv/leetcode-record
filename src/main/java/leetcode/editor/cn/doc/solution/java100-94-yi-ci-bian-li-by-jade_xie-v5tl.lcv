![图1.png](https://pic.leetcode-cn.com/1615877102-mFpovo-%E5%9B%BE1.png)

我做本题的思想类似于刷漆

以[2 0 2 1 1 1 0]为例 大致可以这样理解：

    [2 0 2 1 1 1 0] 
    -> [2 2 2 2 2 2 2] 先全填上2
    -> [1 1 1 1 1 2 2] 统计下0和1的个数之和(作为数字1的右侧边界)，然后填上1
    -> [0 0 1 1 1 2 2] 统计下0的个数（作为数字0的右侧边界），然后填上0

错误代码如下：

（**注意，下面这第一份代码是错误的，因为第一次循环就会用2覆盖掉原数据，这里只是为了帮助理解，下下方的第二份代码才是正确的最终代码！**）

* java

```java

class Solution {
    public void sortColors(int[] nums) {

        //zero表示数字0的右侧边界，one、two分别表示1 和 2 的右侧边界
        int zero = 0;
        int one = 0;
        int two = 0;
        

        int length = nums.length;

        for(int i = 0; i < length; i++)
        {
            //记录下待处理的值
            int temp = nums[i];

            //不管怎样，我先给你填个2
            nums[two] = 2;
            two ++;

        }

        for(int i = 0; i < length; i++)
        {
            //记录下待处理的值
            int temp = nums[i];

            // <=1的话 1的右侧边界one要向右挪一格
            if(temp <= 1)
            {
                nums[one] = 1;
                one ++;
            }

        }

        for(int i = 0; i < length; i++)
        {
            //记录下待处理的值
            int temp = nums[i];

            //为0的话 0的右侧边界zero要向右挪一格
            if(temp == 0)
            {
                nums[zero] = 0;
                zero ++;
            }
        }

    }
}

```

**而这三个循环是可以合成一个的，如下：**

正确代码如下：

* java

```java

class Solution {
    public void sortColors(int[] nums) {

        //zero表示数字0的右侧边界，one、two分别表示1 和 2 的右侧边界
        int zero = 0;
        int one = 0;
        int two = 0;
        

        int length = nums.length;

        for(int i = 0; i < length; i++)
        {
            //记录下待处理的值
            int temp = nums[i];

            //不管怎样，我先给你填个2
            nums[two] = 2;
            two ++;

            // <=1的话 1的右侧边界one要向右挪一格
            if(temp <= 1)
            {
                nums[one] = 1;
                one ++;
            }

            //为0的话 0的右侧边界zero要向右挪一格
            if(temp == 0)
            {
                nums[zero] = 0;
                zero ++;
            }
        }
    }
}

```

大功告成，一次遍历！

**关于这三个循环为何能合成一个循环的问题：**

之所以纠结多个循环能否合成一个，是因为害怕错误赋值，带来错误的结果。

而本题中 0 的优先级 高于 1 的优先级 高于 2 的优先级

所以

* 

```
for()
{
    填入2
    填入1
    填入0
}
```

这种先填2 再填1 再填0 的次序保证了优先级

以填0为例  如果当前位置需要填上0的话  不过该位置之前是何值 我都直接填上0 并且zero++

由于2 1 0 的填入次序，保证了：

- 填入0后，该格子一定不会再被修改了(zero 已经++ 了，同时 zero <= one <= two，其他数字也不可能再修改该格子)
- 填入1后，该格子只可能被0覆盖
- 填入2后，该格子可能会被1和0覆盖，没有覆盖的部分就是1的右侧边界 到 数组的右侧边界这部分，恰好就是数字2的个数

原数组对应被分为了3个部分
0 -> zero（填好了0），zero+1 -> one（填好了1），one + 1 -> two（填好了2）

